This patch fixes a possibility of a DoS attack on ejabberd
due to message queue overload of an Erlang process serving
c2s (client to server) traffic; it is tracked upstream at
https://support.process-one.net/browse/EJAB-1173
and in the Debian security tracker at
http://security-tracker.debian.org/tracker/CVE-2010-0305

The patch is based on changesets: 2936, 2938 and 2939
of http://svn.process-one.net/ejabberd/branches/ejabberd-2.1.x

Index: pkg-ejabberd/src/ejabberd_c2s.erl
===================================================================
--- pkg-ejabberd.orig/src/ejabberd_c2s.erl	2010-02-10 20:45:21.000000000 +0300
+++ pkg-ejabberd/src/ejabberd_c2s.erl	2010-02-10 21:00:15.000000000 +0300
@@ -28,7 +28,9 @@
 -author('alexey@process-one.net').
 -update_info({update, 0}).
 
--behaviour(gen_fsm).
+-define(GEN_FSM, p1_fsm).
+
+-behaviour(?GEN_FSM).
 
 %% External exports
 -export([start/2,
@@ -102,8 +104,8 @@
 
 %% Module start with or without supervisor:
 -ifdef(NO_TRANSIENT_SUPERVISORS).
--define(SUPERVISOR_START, gen_fsm:start(ejabberd_c2s, [SockData, Opts],
-					?FSMOPTS)).
+-define(SUPERVISOR_START, ?GEN_FSM:start(ejabberd_c2s, [SockData, Opts],
+					 fsm_limit_opts(Opts) ++ ?FSMOPTS)).
 -else.
 -define(SUPERVISOR_START, supervisor:start_child(ejabberd_c2s_sup,
 						 [SockData, Opts])).
@@ -142,14 +144,15 @@
     ?SUPERVISOR_START.
 
 start_link(SockData, Opts) ->
-    gen_fsm:start_link(ejabberd_c2s, [SockData, Opts], ?FSMOPTS).
+    ?GEN_FSM:start_link(ejabberd_c2s, [SockData, Opts],
+			fsm_limit_opts(Opts) ++ ?FSMOPTS).
 
 socket_type() ->
     xml_stream.
 
 %% Return Username, Resource and presence information
 get_presence(FsmRef) ->
-    gen_fsm:sync_send_all_state_event(FsmRef, {get_presence}, 1000).
+    ?GEN_FSM:sync_send_all_state_event(FsmRef, {get_presence}, 1000).
 
 %%%----------------------------------------------------------------------
 %%% Callback functions from gen_fsm
@@ -213,7 +216,7 @@
 
 %% Return list of all available resources of contacts,
 get_subscribed(FsmRef) ->
-    gen_fsm:sync_send_all_state_event(FsmRef, get_subscribed, 1000).
+    ?GEN_FSM:sync_send_all_state_event(FsmRef, get_subscribed, 1000).
 
 %%----------------------------------------------------------------------
 %% Func: StateName/2
@@ -876,7 +879,7 @@
 session_established(timeout, StateData) ->
     %% TODO: Options must be stored in state:
     Options = [],
-    proc_lib:hibernate(gen_fsm, enter_loop,
+    proc_lib:hibernate(?GEN_FSM, enter_loop,
 		       [?MODULE, Options, session_established, StateData]),
     fsm_next_state(session_established, StateData);
 
@@ -1339,6 +1342,19 @@
     (StateData#state.sockmod):close(StateData#state.socket),
     ok.
 
+fsm_limit_opts(Opts) ->
+    case lists:keysearch(max_fsm_queue, 1, Opts) of
+	{value, {_, N}} when is_integer(N) ->
+	    [{max_queue, N}];
+	_ ->
+	    case ejabberd_config:get_local_option(max_fsm_queue) of
+		N when is_integer(N) ->
+		    [{max_queue, N}];
+		_ ->
+		    []
+	    end
+    end.
+
 %%%----------------------------------------------------------------------
 %%% Internal functions
 %%%----------------------------------------------------------------------
