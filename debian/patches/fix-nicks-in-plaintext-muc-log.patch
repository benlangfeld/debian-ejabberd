Description: Fix angle brackets handle in MUC plaintext log
 If the type of log files generated by the mod_muc_module
 is set to plaintext, the renderer cuts out all the text
 which starts with a '<' character and ends with a '>' characters,
 inclusive, which, among other things, inhibits displaying of
 room nicknames.  This patch fixes this behaviour.
 .
 This patch is a backport of changes introduced by the commits
 15073aafa58871b8d5e25652d492fb3a76900d5b,
 bc8264b2ac6cf58d267dc06bb0d45585d5d677d0,
 e85f7566dd7895f922f63528feed2995cd3eb52b and
 0b96b745bf4146dca3c3709765945fc97679465f in the upstream
 Git repository to the ejabberd code base as of version 2.1.13.
Author: Badlop <badlop@process-one.net>
Forwarded: not-needed
Last-Update: 2013-09-30
---
This patch header follows DEP-3: http://dep.debian.net/deps/dep3/
--- a/src/mod_muc/mod_muc_log.erl
+++ b/src/mod_muc/mod_muc_log.erl
@@ -52,6 +52,9 @@
 -define(PROCNAME, ejabberd_mod_muc_log).
 -record(room, {jid, title, subject, subject_author, config}).
 
+-define(PLAINTEXT_CO, "ZZCZZ").
+-define(PLAINTEXT_IN, "ZZIZZ").
+-define(PLAINTEXT_OUT, "ZZOZZ").
 
 -record(logstate, {host,
 		out_dir,
@@ -311,6 +314,11 @@
     fw(F, "  <a href=\"http://jigsaw.w3.org/css-validator/\"><img style=\"border:0;width:88px;height:31px\" src=\"~s/vcss.png\" alt=\"Valid CSS!\"/></a>", [Images_dir]),
     fw(F, "</span></div></body></html>").
 
+htmlize_nick(Nick1, html) ->
+    htmlize("<"++Nick1++">", html);
+htmlize_nick(Nick1, plaintext) ->
+    htmlize(?PLAINTEXT_IN++Nick1++?PLAINTEXT_OUT, plaintext).
+
 add_message_to_log(Nick1, Message, RoomJID, Opts, State) ->
     #logstate{out_dir = OutDir,
 	   dir_type = DirType,
@@ -323,7 +331,7 @@
 	   top_link = TopLink} = State,
     Room = get_room_info(RoomJID, Opts),
     Nick = htmlize(Nick1, FileFormat),
-    Nick2 = htmlize("<"++Nick1++">", FileFormat),
+    Nick2 = htmlize_nick(Nick1, FileFormat),
     Now = now(),
     TimeStamp = case Timezone of
 		    local -> calendar:now_to_local_time(Now);
@@ -438,7 +446,7 @@
     STimeUnique = io_lib:format("~s.~w", [STime, Microsecs]),
 
     %% Write message
-    fw(F, io_lib:format("<a id=\"~s\" name=\"~s\" href=\"#~s\" class=\"ts\">[~s]</a> ", 
+    catch fw(F, io_lib:format("<a id=\"~s\" name=\"~s\" href=\"#~s\" class=\"ts\">[~s]</a> ",
 			[STimeUnique, STimeUnique, STimeUnique, STime]) ++ Text, FileFormat),
 
     %% Close file
@@ -662,7 +670,10 @@
 	     html ->
 		 S1;
 	     plaintext ->
-		 ejabberd_regexp:greplace(S1, "<[^>]*>", "")
+		 S1a = ejabberd_regexp:greplace(S1, "<[^<^>]*>", ""),
+		 S1x = ejabberd_regexp:greplace(S1a, ?PLAINTEXT_CO, "~~"),
+		 S1y = ejabberd_regexp:greplace(S1x, ?PLAINTEXT_IN, "<"),
+		 ejabberd_regexp:greplace(S1y, ?PLAINTEXT_OUT, ">")
 	 end,
     io:format(F, S2, []).
 
@@ -767,14 +778,16 @@
     htmlize(S1, html).
 
 htmlize(S1, plaintext) ->
-    S1;
+    ejabberd_regexp:greplace(S1, "~", ?PLAINTEXT_CO);
 htmlize(S1, FileFormat) ->
     htmlize(S1, false, FileFormat).
 
 %% The NoFollow parameter tell if the spam prevention should be applied to the link found
 %% true means 'apply nofollow on links'.
-htmlize(S1, _NoFollow, plaintext) ->
-    S1;
+htmlize(S0, _NoFollow, plaintext) ->
+    S1  = ejabberd_regexp:greplace(S0, "~", ?PLAINTEXT_CO),
+    S1x = ejabberd_regexp:greplace(S1, "<", ?PLAINTEXT_IN),
+    ejabberd_regexp:greplace(S1x, ">", ?PLAINTEXT_OUT);
 htmlize(S1, NoFollow, _FileFormat) ->
     S2_list = string:tokens(S1, "\n"),
     lists:foldl(
